@model HomeIndexVm

<h2>Teacher with Id 1</h2>
<article>
    <h4>Name: @(Model.TeacherWidthIdOne?.Name ?? "[Not found]")</h4>
    <p>Wage: @(Model.TeacherWidthIdOne?.YearlyWage?.ToString("C2") ?? "Unknown")</p>
</article>

<h2>All Students born before 2000</h2>
<ul>
    @foreach (var student in Model.StudentsBornBefore2k)
    {
        <li>
            <h4>Name: @student.Name</h4>
            <p>Scholarship: @(student.Scholarship?.ToString("C2") ?? "None")</p>
            <p>Birthday: @(student.Birthdate.ToString("dd MMMM yyyy"))</p>
        </li>
    }
</ul>

<h2>Total amount of Scholarships</h2>
<article>
    <div>@Model.TotalScholarships.ToString("C2")</div>
</article>

<h2>Scholarship Students with Contact info</h2>
<ul>
    @foreach (var student in Model.ScholarshipStudentsWithInfo)
    {
        <li>
            <h4>Name: @student.Name</h4>
            <p>Scholarship: @(student.Scholarship?.ToString("C2") ?? "None")</p>
            <p>Birthday: @(student.Birthdate.ToString("dd MMMM yyyy"))</p>
            <p>E-mail: @student.ContactInfo.Email</p>
            <p>Phone: @student.ContactInfo.Phone</p>
        </li>
    }
</ul>

<h2>Courses - Full Graph</h2>
<ul>
    @foreach (var course in Model.Courses)
    {
        <li>
            <h4>@course.Name</h4>
            <p>Lecturer: @course.Lecturer.Name</p>
            <p>Students (@course.StudentCourses.Count):</p>
            <ul>
                @foreach (var studentcourse in course.StudentCourses
                   .OrderBy(sc => sc.Student.Name))
                {
                    <li><p>@studentcourse.Student.Name</p></li>
                }
            </ul>

        </li>
    }
</ul>

