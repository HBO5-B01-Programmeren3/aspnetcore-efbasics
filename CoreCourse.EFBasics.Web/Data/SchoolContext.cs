using CoreCourse.EFBasics.Web.Entities;
using Microsoft.EntityFrameworkCore;

namespace CoreCourse.EFBasics.Web.Data
{
    public class SchoolContext : DbContext
    {
        public SchoolContext(DbContextOptions<SchoolContext> options) : base(options)
        {
        }

        public DbSet<Teacher> Teachers { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<StudentInfo> StudentInfo { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //configure a composite PK in StudentCourse, consisting of both FK's
            modelBuilder.Entity<StudentCourse>()
                .ToTable("StudentCourses")  //we don't define a DbSet for this entity, so we define the Table name here
                .HasKey(sc => new { sc.StudentId, sc.CourseId });  //define the composite Primary Key

            modelBuilder.Entity<StudentCourse>()    //entity StudentCourse ...
                .HasOne(sc => sc.Student)           //... is associated with 1 Student
                .WithMany(s => s.StudentCourses)    //... which is in turn associated to many StudentCourses
                .HasForeignKey(sc => sc.StudentId); //... using StudentId as the FK for this relationship.

            modelBuilder.Entity<StudentCourse>()    //entity StudentCourse ...
                .HasOne(sc => sc.Course)            //... is associated with 1 Course
                .WithMany(s => s.StudentCourses)    //... which is in turn associated to many StudentCourses
                .HasForeignKey(sc => sc.CourseId);  //... using CourseId as the FK for this relationship.

            //StudentInfo config
            modelBuilder.Entity<StudentInfo>()      //entity StudentInfo ...
                .HasKey(si => si.Id);               //... uses Id as its primary key

            modelBuilder.Entity<StudentInfo>()
                .Property(si => si.Id)              //The property Id of StudentInfo ...
                .ValueGeneratedOnAdd();             //... has a value which is autogenerated on Insert

            modelBuilder.Entity<StudentInfo>()
                .Property(si => si.Email)           //The property Email of StudentInfo
                .HasMaxLength(100)                  //... cannot exceed 100 characters
                .IsRequired();                      //... and may not be null

            modelBuilder.Entity<StudentInfo>()
                .Property(si => si.Phone)           //The property Phone of StudentInfo
                .HasMaxLength(30);                  //... cannot exceed 100 characters

            modelBuilder.Entity<StudentInfo>()   //entity StudentInfo ...
                .HasOne(si => si.Student)           //... is associated with exactly 1 Student
                .WithOne(s => s.ContactInfo)        //... which is in turn associated with 1 StudentInfo
                .HasForeignKey<StudentInfo>(si => si.StudentId); //and StudentId is the FK in this relationship       

            // the following would be implicitly set, because it uses default values.
            // it's only here to demonstrate some more Fluent API :-)
            modelBuilder.Entity<Course>()          //entity Course ...
                .HasOne(c => c.Lecturer)           //... can be associated with exactly 1 Teacher
                .WithMany(t => t.Courses)          //... which can in turn be associated with many Courses
                .IsRequired(false)                 //... the relationship is optional 
                                                   //    (this call is not needed! optional = default)
                .OnDelete(DeleteBehavior.ClientSetNull); //... will set Lecturer to null if Teacher is deleted 
                                                         //    (this call is not needed!  because this is the 
                                                         //     default behaviour for optional relationships)
                                                         
            base.OnModelCreating(modelBuilder);
        }
    }
}
